#Extends "Libs/Nadeo/TMNext/TrackMania/Modes/TMNextBase.Script.txt"

#Const	CompatibleMapTypes	"TrackMania\\TM_Race,TM_Race"
#Const	Version							"02-03-2022"
#Const  Author               					"Plantathon"
#Const	ScriptName					"Modes/TrackMania/MedalAttack.Script.txt"

#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/Rounds/StateManager.Script.txt" as StateMgr
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TrophyRanking.Script.txt" as TrophyRanking
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConsts
#Include "Libs/Nadeo/ModeLibs/Common/Utils.Script.txt" as ModeUtils
// UI from Race
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/TimeGap_Server.Script.txt" as UIModules_TimeGap
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Checkpoint_Server.Script.txt" as UIModules_Checkpoint
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/ScoresTable_Server.Script.txt" as UIModules_ScoresTable
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/PauseMenuOnline_Server.Script.txt" as UIModules_PauseMenu_Online
#Include "ManiaApps/Nadeo/TMNext/TrackMania/TimeAttack/UIModules/EndMatchTrophy_Server.Script.txt" as UIModules_EndMatchTrophy

#Setting S_TimeLimit 60 as _("Time limit") ///< Time limit before going to the next map
#Setting S_WarmUpNb 0 as _("Number of warm up")
#Setting S_WarmUpDuration 0 as _("Duration of one warm up")
#Setting S_WarmUpTimeout -1 as _("Warm up timeout")
#Setting S_ForceLapsNb 0

#Const C_ModeName "Medal Attack"
//L16N [Time Attack] Description of the mode rules
#Const Description _("$zIn $<$t$6F9Medal Attack$> mode, the goal is to get the $<$t$6F9most medals$>.\n\nYou have as many tries as you want, and you can $<$t$6F9retry$> when you want by pressing the respawn key.\n\nWhen the time is up, the $<$t$6F9winner$> is the player with the $<$t$6F9most medals$>.")

#Const C_HudModulePath "" //< Path to the hud module
#Const C_ManiaAppUrl "file://Media/ManiaApps/Nadeo/TMNext/TrackMania/Rounds/Rounds.Script.txt" //< Url of the mania app
#Const C_FakeUsersNb 0

#Const C_UploadRecord True
#Const C_DisplayRecordGhost True
#Const C_DisplayRecordMedal True
#Const C_CelebrateRecordGhost True
#Const C_CelebrateRecordMedal True
#Const C_DisplayWorldTop True

#Const C_TrophyTaskTimeout 5000
#Const C_TrophyAnimationDuration 4000
#Const C_TrophyDisplayDuration 7000

***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
Log::RegisterScript(StateMgr::ScriptName, StateMgr::Version);
***

***Match_LoadLibraries***
***
StateMgr::Load();
***

***Match_UnloadLibraries***
***
StateMgr::Unload();
***

***Match_Settings***
***
MB_Settings_UseDefaultTimer = False;
MB_Settings_UseDefaultHud = (C_HudModulePath == "");
MB_Settings_UseDefaultPodiumSequence = False;
***

***Match_Rules***
***
ModeInfo::SetName(C_ModeName);
ModeInfo::SetType(ModeInfo::C_Type_FreeForAll);
ModeInfo::SetRules(Description);
ModeInfo::SetStatusMessage(_("TYPE: Free for all\nOBJECTIVE: Set the best time on the track."));
***

***Match_LoadHud***
***
if (C_HudModulePath != "") Hud_Load(C_HudModulePath);
***

***Match_AfterLoadHud***
***
ClientManiaAppUrl = C_ManiaAppUrl;
Race::SortScores(Race::C_Sort_TotalPoints);
UIModules_ScoresTable::SetScoreMode(UIModules_ScoresTable::C_Mode_Points);
UIModules_Checkpoint::SetVisibilityTimeDiff(False);
UIModules_Checkpoint::SetRankMode(UIModules_Checkpoint::C_RankMode_CurrentRace);
UIModules_PauseMenu_Online::SetHelp(Description);
// Hide SM Overlay
UIManager.UIAll.OverlayHideSpectatorControllers = True;
UIManager.UIAll.OverlayHideSpectatorInfos = True;
UIManager.UIAll.OverlayHideChrono = True; 
UIManager.UIAll.OverlayHideCountdown = True;
***

***Match_Yield***
***
foreach (Event in PendingEvents) {
	switch (Event.Type) {
		// Initialize players when they join the server
		case CSmModeEvent::EType::OnPlayerAdded: {
			StateMgr::InitializePlayer(Event.Player);
			CarRank::InitializePlayer(Event.Player);
			if (Event.Player != Null) {
				declare Boolean Match_CanForceTrophyRankUpdate for This;
				TrophyRanking::InitializeUser(Event.Player.User, Match_CanForceTrophyRankUpdate);
			}
		}
	}
}
StateMgr::Yield();
TrophyRanking::Yield();
***

***Match_StartServer***
***
// Initialize mode
Clans::SetClansNb(0);
GiveUpBehaviour_RespawnAfter = True;
CrudeExtrapolation_AllowDelay = True;
Race::SetRespawnBehaviour(Race::C_RespawnBehaviour_GiveUpBeforeFirstCheckpoint);
Scores::SaveInScore(Scores::C_Points_Match);
StateMgr::ForcePlayersStates([StateMgr::C_State_Waiting]);
WarmUp::SetAvailability(True);
CarRank::Reset();
***

***Match_InitMatch***
***
declare Task::LibCommonTask_K_Task Match_TrophyTask;
declare Integer Match_TrophyTaskEndTime;
declare Integer Match_MatchDuration;
declare Boolean Match_CanForceTrophyRankUpdate for This = False;
***

***Match_AfterLoadMap***
***
Match_CanForceTrophyRankUpdate = True;
***

***Match_InitMap***
***
InitMedalUI();
declare Integer Map_TimeLimit;
declare Integer Map_MapStartTime;
***

***Match_StartMap***
***
// Add bot when necessary
Users_SetNbFakeUsers(C_FakeUsersNb, 0);

// Warm up
UIModules_ScoresTable::SetFooterInfo(_("Warmup"));
GiveUpBehaviour_RespawnAfter = False;
MB_WarmUp(S_WarmUpNb, S_WarmUpDuration * 1000, S_WarmUpTimeout * 1000);
GiveUpBehaviour_RespawnAfter = True;

// Initialize race
StartTime = Now + Race::C_SpawnDuration;
Map_TimeLimit = S_TimeLimit;
Map_MapStartTime = StartTime;
SetTimeLimit(StartTime, S_TimeLimit);

// Spawn players for the race
foreach (Player in Players) {
	Race::Start(Player, StartTime);
}

StateMgr::ForcePlayersStates([StateMgr::C_State_Playing]);
CarRank::Update(CarRank::C_SortCriteria_BestRace);
Race::EnableIntroDuringMatch(True);
***

***Match_PlayLoop***
***
// Manage race events
declare RacePendingEvents = Race::GetPendingEvents();
foreach (Event in RacePendingEvents) {
	Race::ValidEvent(Event);
        if (Event.Type == Events::C_Type_Waypoint) {
            if (Event.IsEndRace) {
                Scores::UpdatePlayerPrevRace(Event.Player);
                    if (Event.Player.CurrentRaceTime <= Map.TMObjective_BronzeTime && Event.Player.CurrentRaceTime > Map.TMObjective_SilverTime) {
                        Scores::AddPlayerRoundPoints(Event.Player.Score, 2);
                        UIManager.GetUI(Event.Player).QueueMessage(1500, 2, CUIConfig::EMessageDisplay::Big, "$a85+2", CUIConfig::EUISound::FirstHit, 0);
                        UIManager.UIAll.SendChat(TL::Join("", ["$a85", Event.Player.User.Name, " scored a Bronze Medal!"]));
                    }
                    if (Event.Player.CurrentRaceTime < Map.TMObjective_SilverTime && Event.Player.CurrentRaceTime > Map.TMObjective_GoldTime) {
                        Scores::AddPlayerRoundPoints(Event.Player.Score, 4);
                        UIManager.GetUI(Event.Player).QueueMessage(1500, 2, CUIConfig::EMessageDisplay::Big, "$ccc+4", CUIConfig::EUISound::FirstHit, 0);
                        UIManager.UIAll.SendChat(TL::Join("", ["$ccc", Event.Player.User.Name, " scored a Silver Medal!"]));
                    }
                    if (Event.Player.CurrentRaceTime <= Map.TMObjective_GoldTime && Event.Player.CurrentRaceTime > Map.TMObjective_AuthorTime) {
                        Scores::AddPlayerRoundPoints(Event.Player.Score, 6);
                        UIManager.GetUI(Event.Player).QueueMessage(1500, 2, CUIConfig::EMessageDisplay::Big, "$ff9+6", CUIConfig::EUISound::FirstHit, 0);
                        UIManager.UIAll.SendChat(TL::Join("", ["$ff9", Event.Player.User.Name, " scored a Gold Medal!"]));
                    }
                    if (Event.Player.CurrentRaceTime <= Map.TMObjective_AuthorTime) {
                        Scores::AddPlayerRoundPoints(Event.Player.Score, 8);
                        UIManager.GetUI(Event.Player).QueueMessage(1500, 2, CUIConfig::EMessageDisplay::Big, "$8f8+8", CUIConfig::EUISound::FirstHit, 0);
                        UIManager.UIAll.SendChat(TL::Join("", ["$8f8", Event.Player.User.Name, " scored an Author Medal!"]));
                    }
				Race::Start(Event.Player);
            }
        }
}

// Manage mode events
foreach (Event in PendingEvents) {
	if (Event.HasBeenPassed || Event.HasBeenDiscarded) continue;
	Events::Invalid(Event);
}

// Spawn players
if (PlayersNbDead > 0) { //< Check for unspawned players only if at least one player is unspawned
	foreach (Player in Players) {
		if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && Race::IsReadyToStart(Player)) {
			Race::Start(Player);
		}
	}
}

// Update the map duration setting
if (Map_TimeLimit != S_TimeLimit) {
	Map_TimeLimit = S_TimeLimit;
	SetTimeLimit(StartTime, S_TimeLimit);
}

// End the map when time limit is reached
if (EndTime > 0 && Now >= EndTime) {
	MB_StopMatch();
}
***

***Match_EndMap***
***
// Ensure that we stop the match (after a vote for the next map, ...)
MB_StopMatch();

EndTime = -1;
Match_MatchDuration = ML::Max(0, Now - Map_MapStartTime);
StateMgr::ForcePlayersStates([StateMgr::C_State_Waiting]);
Race::EnableIntroDuringMatch(False);

Scores::EndRound();
Race::SortScores(Race::C_Sort_TotalPoints);
TrophyRanking::UpdateUsersRank();
CarRank::Update(CarRank::C_SortCriteria_BestRace);
Scores::SetPlayerWinner(Scores::GetBestPlayer(Scores::C_Sort_MatchPoints));
Race::StopSkipOutroAll();
***

***Match_BeforePodiumSequence***
***
UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
UIManager.UIAll.BigMessageSoundVariant = 0;

declare Text Message = _("|Match|Draw");
declare CSmScore WinnerScore <=> Scores::GetPlayerWinner();
if (WinnerScore != Null) {
	if (!MB_MatchIsRunning()) Message = TL::Compose(_("$<%1$> wins the match!"), WinnerScore.User.Name);
	else Message = TL::Compose(_("$<%1$> wins the map!"), WinnerScore.User.Name);
}

UIManager.UIAll.BigMessage = Message;

// Compute match trophies
Trophy_LiveTimeAttackAchievement_ClearResultList();
foreach (Key => Score in Scores) {
	if (TrophyRanking::UserIsRanked(Score.User) && Score.BestRaceTimes.count > 0 && Score.BestRaceTimes[Score.BestRaceTimes.count - 1] >= 0) {
		Trophy_LiveTimeAttackAchievement_AddResult(Score.User.WebServicesUserId, Key + 1, TrophyRanking::GetUserRank(Score.User));
	}
}
Match_TrophyTask = Task::Create(This, Trophy_LiveTimeAttackAchievement_SendResultList(Match_MatchDuration / 1000));
Match_TrophyTaskEndTime = Now + C_TrophyTaskTimeout;
UIModules_ScoresTable::ResetTrophies();
***

***Match_PodiumSequence***
***
declare CUIConfig::EUISequence PrevUISequence = UIManager.UIAll.UISequence;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
MB_Private_Sleep((S_ChatTime*1000)/2);

// Wait until the trophy task is complete
Match_TrophyTask = Task::Update(Match_TrophyTask);
while (Task::IsInitialized(Match_TrophyTask) && Task::IsRunning(Match_TrophyTask) && Now < Match_TrophyTaskEndTime) {
	MB_Yield();
	Match_TrophyTask = Task::Update(Match_TrophyTask);
}
if (Task::IsInitialized(Match_TrophyTask)) {
	Match_TrophyTask = Task::Update(Match_TrophyTask);
	declare Integer[Integer][Text] AccountsTrophies;
	if (!Task::IsRunning(Match_TrophyTask)) {
		declare CTaskResult_AccountTrophyGainList SourceTask = Task::GetSourceTask_AccountTrophyGainList(Match_TrophyTask);
		if (Task::IsSuccess(Match_TrophyTask) && SourceTask != Null) {
			foreach (AccountTrophyGain in SourceTask.AccountTrophyGainList) {
				declare Integer[Integer] AccountTrophies = UIModules_ScoresTable::ConvertAccountTrophyGain(AccountTrophyGain);
				if (AccountTrophies.count > 0) {
					AccountsTrophies[AccountTrophyGain.WebServicesUserId] = AccountTrophies;
				}
			}
		}
	}
	Match_TrophyTask = Task::Destroy(Match_TrophyTask);
	UIModules_ScoresTable::SetTrophies(AccountsTrophies);
	UIModules_EndMatchTrophy::PlayTrophyAnimation(AccountsTrophies);
	MB_Private_Sleep(C_TrophyAnimationDuration);
}

UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
MB_Private_Sleep((S_ChatTime*1000)/2);
MB_Private_Sleep(C_TrophyDisplayDuration);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
UIManager.UIAll.UISequence = PrevUISequence;
***

***Match_AfterPodiumSequence***
***
UIManager.UIAll.BigMessage = "";
UIModules_ScoresTable::ResetTrophies();
***


***Match_BeforeUnloadMap***
***
Match_CanForceTrophyRankUpdate = False;
***

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the time limit
 *
 *	@param	_StartTime								The starting time of the map
 *	@param	_NewTimeLimit							The time limit before going to the next map
 */
Void SetTimeLimit(Integer _StartTime, Integer _NewTimeLimit) {
	if (_NewTimeLimit <= 0) {
		EndTime = -1;
		UIModules_ScoresTable::SetFooterInfo(TL::Compose("%1 -", _("Time Limit")));
	} else {
		EndTime = _StartTime + (S_TimeLimit * 1000);
		UIModules_ScoresTable::SetFooterInfo(TL::Compose("%1 "^TL::TimeToText(_NewTimeLimit*1000), _("Time Limit")));
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the right sort criteria for
 *	the ladder
 *
 *	@return														The sort criteria
 */
Integer GetLadderSortCriteria() {
	if (Race::IsIndependentLaps()) return Scores::C_Sort_BestLapTime;
	return Scores::C_Sort_BestRaceTime;
}

Text HudMedals() {
    return """
    <?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3">
	<label id="AuthorTime" pos="-143 75" z-index="0" size="19 5" text="00.00" textfont="GameFontSemiBold" halign="left" valign="center"/>
	<label id="GoldTime" pos="-143 65" z-index="0" size="19 5" text="00.00" textfont="GameFontSemiBold" halign="left" valign="center"/>
	<label id="SilverTime" pos="-143 55" z-index="0" size="19 5" text="00.00" textfont="GameFontSemiBold" halign="left" valign="center"/>
	<label id="BronzeTime"pos="-143 45" z-index="0" size="19 5" text="00.00" textfont="GameFontSemiBold" halign="left" valign="center"/>
	<quad pos="-150 45" z-index="0" size="10 10" bgcolor="FFF" opacity="1" substyle="MedalBronze" style="MedalsBig" halign="center" valign="center"/>
	<quad pos="-150 55" z-index="0" size="10 10" bgcolor="FFF" opacity="1" substyle="MedalSilver" style="MedalsBig" halign="center" valign="center"/>
	<quad pos="-150 65" z-index="0" size="10 10" bgcolor="FFF" opacity="1" substyle="MedalGold" style="MedalsBig" halign="center" valign="center"/>
	<quad pos="-150 75" z-index="0" size="10 10" bgcolor="FFF" opacity="1" substyle="MedalNadeo" style="MedalsBig" halign="center" valign="center"/>
	<quad pos="-158 82" z-index="0" size="35 44" bgcolor="FFF" opacity="1" style="UICommon128_1" substyle="BgDialog"/>
	<script><!--
#Include "TextLib" as TL
main() {
	declare CMlLabel lblAuthorTime <=> (Page.GetFirstChild("AuthorTime") as CMlLabel);
	declare CMlLabel lblGoldTime <=> (Page.GetFirstChild("GoldTime") as CMlLabel);
	declare CMlLabel lblSilverTime <=> (Page.GetFirstChild("SilverTime") as CMlLabel);
	declare CMlLabel lblBronzeTime <=> (Page.GetFirstChild("BronzeTime") as CMlLabel);
	while (True) {
        yield;
		lblAuthorTime.Value = TL::TimeToText(Map.TMObjective_AuthorTime, True, True);
		lblGoldTime.Value = TL::TimeToText(Map.TMObjective_GoldTime, True, True);
		lblSilverTime.Value = TL::TimeToText(Map.TMObjective_SilverTime, True, True);
		lblBronzeTime.Value = TL::TimeToText(Map.TMObjective_BronzeTime, True, True);
	}
}
--></script>
</manialink>
""";
}

Void InitMedalUI() {
	Layers::Create("Layer_Medals", HudMedals());
	Layers::SetType("Layer_Medals", CUILayer::EUILayerType::Normal);
	Layers::Attach("Layer_Medals");
}
